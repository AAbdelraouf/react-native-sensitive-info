(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{152:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return l}));var r=t(2),i=(t(0),t(155));const a={id:"android_options",title:"Android",sidebar_label:"Android"},o={id:"android_options",isDocsHomePage:!1,title:"Android",description:"Android specific configurations",source:"@site/docs/android_options.md",permalink:"/react-native-sensitive-info/docs/next/android_options",editUrl:"https://github.com/mCodex/react-native-sensitive-info/tree/master/website/docs/android_options.md",version:"next",lastUpdatedBy:"Mateus Andrade",lastUpdatedAt:1595974446,sidebar_label:"Android",sidebar:"someSidebar",previous:{title:"setItem",permalink:"/react-native-sensitive-info/docs/next/setItem"},next:{title:"iOS",permalink:"/react-native-sensitive-info/docs/next/ios_options"},latestVersionMainDocPermalink:"/react-native-sensitive-info/docs"},c=[{value:"sharedPreferencesName",id:"sharedpreferencesname",children:[]},{value:"touchID",id:"touchid",children:[]},{value:"showModal &amp; strings",id:"showmodal--strings",children:[]},{value:"setInvalidatedByBiometricEnrollment",id:"setinvalidatedbybiometricenrollment",children:[]}],s={rightToc:c};function l({components:e,...n}){return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Android specific configurations"),Object(i.b)("h2",{id:"sharedpreferencesname"},"sharedPreferencesName"),Object(i.b)("p",null,"You can choose the shared preferences' name which you want to use. Otherwise, the default is ",Object(i.b)("strong",{parentName:"p"},"shared_preferences")),Object(i.b)("h2",{id:"touchid"},"touchID"),Object(i.b)("p",null,"Enable fingerprint authentication for Android and TouchID for iOS."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"SInfo.setItem('key1', 'value1', {\n  ...\n  touchID: true,\n});\n")),Object(i.b)("h2",{id:"showmodal--strings"},"showModal & strings"),Object(i.b)("p",null,"When ",Object(i.b)("inlineCode",{parentName:"p"},"showModal")," is ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", an Android native prompt will show up asking for user's authentication."),Object(i.b)("p",null,"You can control strings associated with a modal prompt via ",Object(i.b)("inlineCode",{parentName:"p"},"strings")," option:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"strings: {\n    header: 'Sign in',\n    description: 'Place finger to authenticate',\n    hint: 'Touch',\n    success: 'Fingerprint recognized',\n    notRecognized: 'Fingerprint not recognized, try again',\n    cancel: 'Cancel',\n    cancelled: 'Authentication was cancelled', // reject error message\n}\n")),Object(i.b)("h2",{id:"setinvalidatedbybiometricenrollment"},"setInvalidatedByBiometricEnrollment"),Object(i.b)("p",null,"If you want to control the behaviour on android when new fingers are enrolled or removed on the device on any device with API level greater than 24. You should call during the initialization of your app to the function ",Object(i.b)("inlineCode",{parentName:"p"},"setInvalidatedByBiometricEnrollment"),". This will re-initialise the internal android Key generator with the flag set to keep/invalidate the credentials upon fingers change."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import SInfo from 'react-native-sensitive-info';\n\nSInfo.setInvalidatedByBiometricEnrollment(false);\n")),Object(i.b)("p",null,Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder#setInvalidatedByBiometricEnrollment(boolean)"}),"You can check out more here")))}l.isMDXComponent=!0},155:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),d=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=d(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),b=r,m=p["".concat(o,".").concat(b)]||p[b]||u[b]||a;return t?i.a.createElement(m,c(c({ref:n},l),{},{components:t})):i.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);